"""
Pentagonal numbers are generated by the formula, Pn = n(3n-1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 - 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk - Pj| is minimised; what is the value of D?

"""
from math import sqrt 

def pentagonalNumber(i):
    "Pn = n(3n-1)/2"
    return (((3 * i) - 1) * i) / 2

def isPentagonal(n):
    k = (sqrt(24*n+1)+1)/6
    return k.is_integer()


LIMIT = 1000000 # populate list w/ first 1mm Pentagonal Numbers

pentagonal_numbers = []
i = 1
answer = 0

# populate pentagonal_numbers
while i < LIMIT:
    pentagonal_numbers.append(pentagonalNumber(i))
    i += 1

# cycle thru pentagonal_numbers
for indx1, num1 in enumerate(pentagonal_numbers[1:]):
    for indx2, num2 in enumerate(pentagonal_numbers[:indx1+1]):
        if isPentagonal(num1 + num2) == True and isPentagonal(num1 - num2) == True:
            answer = num1 - num2
            break
    else:
        continue # need for/else to break out of nested for loops
    break

print answer